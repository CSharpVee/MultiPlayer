using MultiPlayer.Server.Communications;
using MultiPlayer.Server.DTO;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Data;

namespace MultiPlayer.Server.Module
{
    internal class TestHotswapModule : AHotswappableModule
    {
        private List<string> _savedLines = new List<string>();
        private bool _sendLast = false;
        private double _elapse;

        public override string Name => "MirC_Servak";

        public override string GetVersion => "-1.1";

        public override string GetExpectedServerVersion => "0.25";

        public override int MaxConnections => 100;

        public override int TargetFPS => 5 ;

        public override void BroadcastState(IEnumerable<ActiveConnection> connections)
        {
            if (!_sendLast)
                return;

            var packet = ServerPacket.Construct(PacketType.NormalComms, Sync, _savedLines.Last());

            foreach (var connection in connections)
                connection.SendPacket(packet);

            _sendLast = false;
        }

        public override void Start()
        {
            _elapse = 0;
            State = State.Starting;
        }

        public override void Stop()
        {
            State = State.Unstarted;
        }


        protected override void UpdateInternal(double dTime)
        {
            _elapse += dTime;

            if (_elapse > 1.3f)
                State = State.Active;

            if (_elapse > 6f)
                State = State.ShuttingDown;

            StateTxt = $"{_elapse:0.##}";
        }

        protected override void ProcessIncomingPacket(int connID, byte[] data)
        {
            var dataStr = Encoding.ASCII.GetString(data);
            _savedLines.Add(dataStr);
            _sendLast = true;
        }
    }
}
