using MultiPlayer.Server.DTO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Windows;
using System.Windows.Media;
using System.Windows.Threading;

namespace ConnTester
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private DispatcherTimer _dt;

        private ConnectionProtocolAbstraction _connProtocol;

        public MainWindow()
        {
            InitializeComponent();
            SetIpToLocal(null, null);
            
            _connProtocol = new ConnectionProtocolAbstraction();

            _dt = new DispatcherTimer();
            _dt.Interval = TimeSpan.FromSeconds(0.5f);
            _dt.Tick += RefreshLines;
            _dt.Start();
        }

        private void RefreshLines(object? sender, EventArgs e)
        {
            var packet = _connProtocol.TryRetrieve();

            if (packet != null)
                serverReponses.Text += Encoding.ASCII.GetString(packet.PacketData) + "\r\n";
        }

        private void SetIpToLocal(object sender, RoutedEventArgs e)
        {
            ipField.Text = "127.0.0.1";
            portField.Text = "6969";
        }

        private void TCP_Connect(object sender, RoutedEventArgs e)
        {
            var ip = IPAddress.Parse(ipField.Text);
            var port = int.Parse(portField.Text);
            var ipEndPoint = new IPEndPoint(ip, port);

            _connProtocol.ConnectViaTCP(ipEndPoint);

            useTcpInd.Background = Brushes.LightGreen;
        }

        private void UPD_Connect(object sender, RoutedEventArgs e)
        {
            var ip = IPAddress.Parse(ipField.Text);
            var port = int.Parse(portField.Text);
            var ipEndPoint = new IPEndPoint(ip, port);

            _connProtocol.ConnectViaUDP(ipEndPoint);

            useUdpInd.Background = Brushes.LightGreen;
        }

        private void OnDestroyClick(object sender, RoutedEventArgs e)
        {
            _connProtocol.DisconnectAll();
            useTcpInd.Background = Brushes.Transparent;
            useUdpInd.Background = Brushes.Transparent;
        }

        private void OnSendClick(object sender, RoutedEventArgs e)
        {
            _connProtocol.Send(dataToSend.Text);
        }

        private void OnServerDisconnectClick(object sender, RoutedEventArgs e)
        {
            var discPacket = ClientPacket.Construct(PacketType.Disconnect, new byte[0]);
            _connProtocol.SendSpecial(discPacket);
        }

        private void OnReconnectClick(object sender, RoutedEventArgs e)
        {
            var reconPacket = ClientPacket.Construct(PacketType.Reconnect, (byte[])null);
            _connProtocol.SendSpecial(reconPacket);
        }
    }

    class ConnectionProtocolAbstraction
    {
        private UdpClient _udpClient;
        private IPEndPoint _udpEndpoint;


        private TcpClient _tcpClient;
        private NetworkStream _tcpStream;

        internal void ConnectViaTCP(IPEndPoint ipEndPoint)
        {
            DisconnectAll();
            _tcpClient = new TcpClient();
            _tcpClient.Connect(ipEndPoint);
            _tcpStream = _tcpClient.GetStream();
        }

        public void ConnectViaUDP(IPEndPoint ipEndPoint)
        {
            DisconnectAll();
            _udpEndpoint = ipEndPoint;
            _udpClient = new UdpClient(ipEndPoint);
        }

        public void DisconnectAll()
        {
            _udpClient?.Dispose();
            _tcpClient?.Dispose();

            _udpClient = null;
            _tcpClient = null;
        }

        public void Send(string data)
        {
            var packet = ClientPacket.Construct(PacketType.NormalComms, data);
            SendSpecial(packet);
        }

        public void SendSpecial(PacketBase packet)
        {
            if (_tcpClient != null)
                SendTCP(packet);

            if (_udpClient != null)
                SendUDP(packet);
        }

        public PacketBase TryRetrieve()
        {
            if (_tcpClient != null)
                return ReceiveTCP();

            if (_udpClient != null)
                return ReceiveUDP();

            return null;
        }

        private void SendTCP(PacketBase data)
        {
            _tcpStream.Write(data.GetBytes());
        }

        private void SendUDP(PacketBase data)
        {
            _udpClient.Send(data.GetBytes());
        }

        private PacketBase ReceiveTCP()
        {
            if (!_tcpStream.DataAvailable)
                return null;

            byte[] metadata = new byte[3];
            _tcpStream.Read(metadata);

            var packetLength = BitConverter.ToUInt16(metadata, 1);
            var packetData = new byte[packetLength];
            if (packetLength > 0)
                _tcpStream.Read(packetData);

            return ClientPacket.Construct((PacketType)metadata[0], packetData);
        }

        private PacketBase ReceiveUDP()
        {
            if (_udpClient.Available <= 0)
                return null;

            var allData = _udpClient.Receive(ref _udpEndpoint);//how does this work even???

            var packetLength = BitConverter.ToUInt16(allData, 1);
            var packetData = new byte[packetLength];
            if (packetLength > 0)
                Buffer.BlockCopy(allData, 3, packetData, 0, packetLength);

            return ClientPacket.Construct((PacketType)allData[0], packetData);
        }
    }
}