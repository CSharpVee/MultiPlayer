using MultiPlayer.Server.Communications;
using MultiPlayer.Server.Module.Base;

namespace MultiPlayer.Server.Module
{
    public abstract class AHotswappableModule : AModule
    {
        protected AHotswappableModule(LogHandle logger) : base(logger)
        {
        }

        public sealed override void JoinConnection()//do we seal it or make it overrideable by children. Probably make it overrrideable for custom authentication'n'shit.
        {
            if (_connections.Count < MaxConnections)
            {
                var client = _socket.AcceptClientConnection();
                var id = GetNextID();
                var conn = new ActiveConnection(client, id);

                AddConnection(conn);
                SendGreetingMsg(conn);
            }
            else
            {
                _socket.Close("Go away now!");
            }
        }

        protected override void HandleInactivity(ActiveConnection conn)
        {
            if ((DateTime.UtcNow - conn.LastContact).TotalSeconds > 10)
            {
                conn.Inactive = true;
            }
        }

        protected sealed override void ProcessReconnect(int connID, byte[] data)
        {
            throw new InvalidOperationException("Reconnection attempted in a non-reconnecting module");
        }
    }
}
