using MPBase.Communications;
using MPBase.DTO;
using MPBase.Module;
using MPBase.Module.Base;
using MPBase.Utilities;
using MultiPlayer.Server.Enums;
using System.Net;
using System.Text;

namespace MultiPlayer.TestClasses
{
    internal class TestHSModuleBlueprint : AModuleBlueprint
    {
        public override string Name => "MirC HS server";
        public override string GetVersion => "-1.1";
        public override string GetExpectedServerVersion => "0.45.5";
        public override int TargetFPS => 5;

        public override AModule CreateInstance(LogHandle logger)
        {
            return new TestHotswapModule(logger);
        }
    }

    internal class TestHotswapModule : AHotswappableModule
    {
        private List<string> _savedLines = new List<string>();
        private bool _sendLast = false;
        private double _elapse;

        public override int MaxConnections => 100;

        public TestHotswapModule(LogHandle logger) : base(logger)
        {

        }

        public override void BroadcastState()
        {
            if (!_sendLast)
                return;

            var packet = ServerPacket.Construct(PacketType.NormalComms, Sync, _savedLines.Last());

            foreach (var connection in _connections)
                connection.SendPacket(packet);

            _sendLast = false;
        }

        public override void Start(AConnectionProtSocket inSocket)
        {
            base.Start(inSocket);
            _elapse = 0;
            State = State.Starting;
        }

        protected override void UpdateInternal(double dTime)
        {
            _elapse += dTime;

            if (_elapse > 1.3f)
                State = State.Active;

            StateTxt = $"{_elapse:0.##}";
        }

        protected override void ProcessIncomingPacket(int connID, byte[] data)
        {
            var dataStr = Encoding.ASCII.GetString(data);
            _savedLines.Add(dataStr);
            _sendLast = true;
        }
    }
}
