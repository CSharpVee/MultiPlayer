using MultiPlayer.Server;
using MultiPlayer.Server.Module;
using MultiPlayer.Server.VMS;
using System.Collections.ObjectModel;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace MultiPlayer
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private ObservableCollection<ServerInstanceVM> _serverVMs;
        private ObservableCollection<ServerInstance> _activeServers;

        private IList<AModule> _availableModules;

        public MainWindow()
        {
            InitializeComponent();
            Populate();

            _activeServers = new ObservableCollection<ServerInstance>();
            _serverVMs = new ObservableCollection<ServerInstanceVM>();

            itemStatus.ItemsSource = _serverVMs;
        }

        private void PlayClicked(object sender, MouseButtonEventArgs e)
        {
            var item = (sender as Image)?.DataContext as ServerInstanceVM;
            if (item != null)
            {
                var inst = GetModel(item);
                inst.Start();
            }
        }

        private void StopClicked(object sender, MouseButtonEventArgs e)
        {
            var item = (sender as Image)?.DataContext as ServerInstanceVM;
            if (item != null)
            {
                var inst = GetModel(item);
                inst.Stop();
            }
        }

        private void PauseClicked(object sender, MouseButtonEventArgs e)
        {
        }

        private void RemoveClicked(object sender, MouseButtonEventArgs e)
        {
            var item = (sender as Image)?.DataContext as ServerInstanceVM;
            if (item != null)
            {
                var inst = GetModel(item);
                inst.Stop();
                _activeServers.Remove(inst);
                _serverVMs.Remove(item);
            }

        }

        private void AddInstanceClicked(object sender, RoutedEventArgs e)
        {
            var module = _availableModules[modulesDropbox.SelectedIndex];
            var name = !string.IsNullOrEmpty(newName.Text) ? newName.Text : module.Name;
            var port = !string.IsNullOrEmpty(newPort.Text) ? newPort.Text : "8088";
            var ipp = "127.0.0.1";//what else would you set this field to anyway? It's your computer's ip.

            var instance = new ServerInstance(IPAddress.Parse(ipp), int.Parse(port), name, module);
            _activeServers.Add(instance);
            _serverVMs.Add(instance.ViewModel);
        }

        private ServerInstance GetModel(ServerInstanceVM vm)
        {
            foreach (var inst in _activeServers)
                if (inst.AreYou(vm))
                    return inst;
            return null;
        }

        private void Populate()
        {
            _availableModules = new List<AModule>();

            var testm = new TestHotswapModule();
            _availableModules.Add(testm);

            modulesDropbox.ItemsSource = _availableModules.Select(x => x.Name);
            modulesDropbox.SelectedIndex = 0;

            //do it by enumerating all .DLL files within "Modules" directory
        }
    }

}