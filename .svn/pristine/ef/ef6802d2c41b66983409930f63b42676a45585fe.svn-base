using MultiPlayer.Server.Module;
using MultiPlayer.Server.VMS;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Net;
using System.Runtime.CompilerServices;

namespace MultiPlayer.Server
{
    internal class RootManager : IPlayerVM, INotifyPropertyChanged
    {
        public ObservableCollection<ServerInstanceVM> ActiveServerModules => _serverVMs;

        public IEnumerable<AModule> AvailableServerModules => _availableModules;

        public string LogLines => Logger.Instance.GetLogtext(0);

        private ObservableCollection<ServerInstanceVM> _serverVMs;
        private ObservableCollection<ServerInstance> _activeServers;

        private IList<AModule> _availableModules;


        public RootManager()
        {
            _activeServers = new ObservableCollection<ServerInstance>();
            _serverVMs = new ObservableCollection<ServerInstanceVM>();
        }

        public void Initialize()
        {
            Populate();
            Logger.Instance.CallbackWhenChanged(0, MainLogChanged);
        }

        private void MainLogChanged()
        {
            OnPropertyChanged(nameof(LogLines));
        }

        public ServerInstance GetModule(ServerInstanceVM vm)
        {
            foreach (var inst in _activeServers)
                if (inst.AreYou(vm))
                    return inst;

            return null;
        }

        public void RemoveModule(ServerInstanceVM item)
        {
            var inst = GetModule(item);
            inst.Stop();
            _activeServers.Remove(inst);
            _serverVMs.Remove(item);
        }

        private void Populate()
        {
            _availableModules = new List<AModule>();

            var testm = new TestHotswapModule();
            _availableModules.Add(testm);

            //do it by enumerating all .DLL files within "Modules" directory
        }

        internal void CreateServerInstance(int selectedIndex, string instName, string instPort)
        {
            var module = _availableModules[selectedIndex];
            var name = !string.IsNullOrEmpty(instName) ? instName : module.Name;
            var port = !string.IsNullOrEmpty(instPort) ? instPort : "8088";
            var ipp = "127.0.0.1";//what else would you set this field to anyway? It's your computer's ip.

            var instance = new ServerInstance(IPAddress.Parse(ipp), int.Parse(port), name, module);
            _activeServers.Add(instance);
            _serverVMs.Add(instance.ViewModel);
        }

        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        } 
        public event PropertyChangedEventHandler? PropertyChanged;
    }
}
