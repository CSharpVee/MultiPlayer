using MPClientBase.DTO;
using MPModuleBase.Module;
using MPModuleBase.Module.Base;
using MPModuleBase.Utilities;

namespace MultiPlayer.TestClasses
{
    internal class TestReconModuleBlueprint : AModuleBlueprint
    {
        public override string Name => "Recon Chat serv";

        public override string GetVersion => "- over9000";

        public override string GetExpectedServerVersion => "0.45.5";

        public override int TargetFPS => 3;

        public override AModule CreateInstance(LogHandle logger)
        {
            return new TestReconnectModule(logger);
        }
    }

    internal class TestReconnectModule : AReconnectingModule
    {
        private List<string> _savedLines = new List<string>();
        private bool _sendLast = false;
        private double _elapse;

        public override int MaxConnections => 14;

        public TestReconnectModule(LogHandle logger) : base(logger)
        {
        }


        public override void BroadcastState()
        {
            if (!_sendLast)
                return;

            var packet = ServerPacket.Construct(PacketType.NormalComms, Sync, _savedLines.Last());

            foreach (var connection in _connections)
                connection.SendPacket(packet);

            _sendLast = false;
        }

        protected override void ProcessIncomingPacket(int connID, byte[] data)
        {
        }

        protected override void UpdateInternal(double dTime)
        {
        }
    }
}
