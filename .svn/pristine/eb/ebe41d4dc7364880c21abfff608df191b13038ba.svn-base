using MultiPlayer.Server;
using MultiPlayer.Server.VMS;

namespace MultiPlayer.TestClasses
{
    internal class VMTest //to quicktest ui
    {
        public ServerInstanceVM[] ActiveModules { get; }

        public VMTest()
        {

            var list = new List<ServerInstanceVM>()
            {
                new ServerInstanceVM(new TestModel() { ModuleName = "Dopatwo", Name = "Dota srv1", ModuleVersion = "2.8.51", Status = 0, StatusTxt = "yup", ActiveConnCount = 3, MaxServerCapacity = 10, IPAddress = "10.2.5.188", Port = 8080, CPU = 2, FPSTarget = 90, RAM = 550}),
                new ServerInstanceVM(new TestModel() { ModuleName = "Dopatwo", Name = "Dota srv5", ModuleVersion = "2.8.51", Status = 1, StatusTxt = "nop", ActiveConnCount = 10, MaxServerCapacity = 10, IPAddress = "10.2.5.188", Port = 8075, CPU = 12, FPSTarget = 90, RAM = 1550}),
                new ServerInstanceVM(new TestModel() { ModuleName = "mIRC", Name = "Baro servas", ModuleVersion = "1.2.185.15", Status = 2, StatusTxt = "", ActiveConnCount = 52, MaxServerCapacity = 999, IPAddress = "10.2.5.188", Port = 6, CPU = 1, FPSTarget = 3, RAM = 15}),
                new ServerInstanceVM(new TestModel() { ModuleName = "SSSnake", Name = "Gyvate", ModuleVersion = "0.95", Status = 3, StatusTxt = "", ActiveConnCount = 4, MaxServerCapacity = 4, IPAddress = "10.2.5.188", Port = 69, CPU = 3, FPSTarget = 90, RAM = 101})
            };

            ActiveModules = list.ToArray();
        }
    }

    public class TestModel : IServerModelInterface
    {
        public string ModuleName { get; set; }
        public string Name { get; set; }

        public string ModuleVersion { get; set; }

        public int Status { get; set; }

        public string StatusTxt { get; set; }

        public int MaxServerCapacity { get; set; }

        public int FPSTarget { get; set; }

        public string IPAddress { get; set; }

        public int Port { get; set; }

        public int ActiveConnCount { get; set; }

        public float RAM { get; set; }

        public float CPU { get; set; }
    }

}