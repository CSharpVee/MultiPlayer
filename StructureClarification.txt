There are essentially 5 apps:
* _ConnTester - a somewhat more robust app for basic implementation testing. Theoretically can test any of my servers, as it allows constructing the packet manually. Client only.
* Chat - a mIRC (yeah, right) liek app, that allows broadcasting data among connected clients. Hotswappable. Server & Client.
* ChatWithHistory - same as chat, with ability to request chat history since users can "reconnect". Reconnecting. Server & Client
* MouseInput - testing for latency. Users' mouse positions over canvas surface are broadcasted for all connected clients. Users can change color. Hotswappable. Server & Client.
* PongServer - a server for a fully freatured (well, somewhere enhanced, somewhere cuts were made) classic pong game. Hotswappable. Only Server as Client includes my whole game engine, which I'm not ready to randomly post on the internet yet.. if ever.

Some fun factoids.
During test app implementation, found out it was kinda tricky (well, not really, but still) to maintain DTOs between server and client for small, dirty projects.
So I used this opportunity to test and prove to myself if any alternatives to a separate DTOs Class Library are any good:
* Chat - uses a linked DTO FILE, that is physically the same for both. Would be very weird to maintain if client & server had their own repos.
* ChatWithHistory - Uses a shared library, which does not produce it's own assembly but gets included as part of the referencing project. A cool alternative.
* MouseInputApp - Does nothing. Well the data from the server's point of view is meaningless. It does not even try to parse it, since it's just a mouse position in bytes, that is stored and immediately broadcast to all listening clients. No point in converting and reconverting again - no processing at server.
* PongServer - The server project is referenced by the client. This actually makes sense since the game can be played offline, so the gameplay loop, that resides in the server gets reused.